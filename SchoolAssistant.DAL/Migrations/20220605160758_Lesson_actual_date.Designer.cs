// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchoolAssistant.DAL;

#nullable disable

namespace SchoolAssistant.DAL.Migrations
{
    [DbContext(typeof(SADbContext))]
    [Migration("20220605160758_Lesson_actual_date")]
    partial class Lesson_actual_date
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AppConfigurationEFCore.Entities.AppConfig", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.ToTable("_Config");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SchoolAssistant.DAL.Models.AppStructure.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("CanAccessConfiguration")
                        .HasColumnType("bit");

                    b.Property<bool>("CanViewAllClassesData")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("SchoolAssistant.DAL.Models.AppStructure.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TeacherId")
                        .HasColumnType("bigint");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ParentId")
                        .IsUnique()
                        .HasFilter("[ParentId] IS NOT NULL");

                    b.HasIndex("StudentId")
                        .IsUnique()
                        .HasFilter("[StudentId] IS NOT NULL");

                    b.HasIndex("TeacherId")
                        .IsUnique()
                        .HasFilter("[TeacherId] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("SchoolAssistant.DAL.Models.Attendance.Presence", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("LessonId")
                        .HasColumnType("bigint");

                    b.Property<long>("SchoolYearId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<long>("StudentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("SchoolYearId");

                    b.HasIndex("StudentId");

                    b.ToTable("Attendance");
                });

            modelBuilder.Entity("SchoolAssistant.DAL.Models.Lessons.Lesson", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("ActualDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<long>("FromScheduleId")
                        .HasColumnType("bigint");

                    b.Property<long>("SchoolYearId")
                        .HasColumnType("bigint");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FromScheduleId");

                    b.HasIndex("SchoolYearId");

                    b.ToTable("Lesson");
                });

            modelBuilder.Entity("SchoolAssistant.DAL.Models.Lessons.PeriodicLesson", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("CronPeriodicity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CustomDuration")
                        .HasColumnType("int");

                    b.Property<long>("LecturerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ParticipatingOrganizationalClassId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ParticipatingSubjectClassId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoomId")
                        .HasColumnType("bigint");

                    b.Property<long>("SchoolYearId")
                        .HasColumnType("bigint");

                    b.Property<long>("SubjectId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("LecturerId");

                    b.HasIndex("ParticipatingOrganizationalClassId");

                    b.HasIndex("ParticipatingSubjectClassId");

                    b.HasIndex("RoomId");

                    b.HasIndex("SchoolYearId");

                    b.HasIndex("SubjectId");

                    b.ToTable("PeriodicLesson");
                });

            modelBuilder.Entity("SchoolAssistant.DAL.Models.LinkingTables.ParentToChild", b =>
                {
                    b.Property<long>("ChildInfoId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsSecondParent")
                        .HasColumnType("bit");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.HasKey("ChildInfoId", "IsSecondParent");

                    b.HasIndex("ParentId");

                    b.ToTable("ParentToChild");
                });

            modelBuilder.Entity("SchoolAssistant.DAL.Models.LinkingTables.TeacherToAdditionalSubject", b =>
                {
                    b.Property<long>("SubjectId")
                        .HasColumnType("bigint");

                    b.Property<long>("TeacherId")
                        .HasColumnType("bigint");

                    b.HasKey("SubjectId", "TeacherId");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeacherToAdditionalSubject");
                });

            modelBuilder.Entity("SchoolAssistant.DAL.Models.LinkingTables.TeacherToMainSubject", b =>
                {
                    b.Property<long>("SubjectId")
                        .HasColumnType("bigint");

                    b.Property<long>("TeacherId")
                        .HasColumnType("bigint");

                    b.HasKey("SubjectId", "TeacherId");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeacherToMainSubject");
                });

            modelBuilder.Entity("SchoolAssistant.DAL.Models.Marks.Mark", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("CollectionId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("IssuerId")
                        .HasColumnType("bigint");

                    b.Property<int>("Main")
                        .HasColumnType("int");

                    b.Property<int?>("Prefix")
                        .HasColumnType("int");

                    b.Property<long>("SchoolYearId")
                        .HasColumnType("bigint");

                    b.Property<long>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<long>("SubjectId")
                        .HasColumnType("bigint");

                    b.Property<int?>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CollectionId");

                    b.HasIndex("IssuerId");

                    b.HasIndex("SchoolYearId");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Mark");
                });

            modelBuilder.Entity("SchoolAssistant.DAL.Models.Marks.MarksOfClass", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("OrganizationalClassId")
                        .HasColumnType("bigint");

                    b.Property<long>("SchoolYearId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SubjectClassId")
                        .HasColumnType("bigint");

                    b.Property<int?>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationalClassId");

                    b.HasIndex("SchoolYearId");

                    b.HasIndex("SubjectClassId");

                    b.ToTable("MarksOfClass");
                });

            modelBuilder.Entity("SchoolAssistant.DAL.Models.Rooms.Room", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("Floor")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Number")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Room");
                });

            modelBuilder.Entity("SchoolAssistant.DAL.Models.SchoolYears.SchoolYear", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Current")
                        .HasColumnType("bit");

                    b.Property<short>("Year")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("SchoolYears");
                });

            modelBuilder.Entity("SchoolAssistant.DAL.Models.Staff.Teacher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PupilsId")
                        .HasColumnType("bigint");

                    b.Property<string>("SecondName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("SchoolAssistant.DAL.Models.StudentsOrganization.OrganizationalClass", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Distinction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.Property<long>("SchoolYearId")
                        .HasColumnType("bigint");

                    b.Property<string>("Specialization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("SupervisorId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SchoolYearId");

                    b.HasIndex("SupervisorId")
                        .IsUnique()
                        .HasFilter("[SupervisorId] IS NOT NULL");

                    b.ToTable("OrganizationalClass");
                });

            modelBuilder.Entity("SchoolAssistant.DAL.Models.StudentsOrganization.SubjectClass", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("OrganizationalClassId")
                        .HasColumnType("bigint");

                    b.Property<long>("SchoolYearId")
                        .HasColumnType("bigint");

                    b.Property<long>("SubjectId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TeacherId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationalClassId");

                    b.HasIndex("SchoolYearId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("SubjectClass");
                });

            modelBuilder.Entity("SchoolAssistant.DAL.Models.StudentsParents.Parent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.HasKey("Id");

                    b.ToTable("Parents");
                });

            modelBuilder.Entity("SchoolAssistant.DAL.Models.StudentsParents.Student", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("InfoId")
                        .HasColumnType("bigint");

                    b.Property<int>("NumberInJournal")
                        .HasColumnType("int");

                    b.Property<long?>("OrganizationalClassId")
                        .HasColumnType("bigint");

                    b.Property<long>("SchoolYearId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("InfoId");

                    b.HasIndex("OrganizationalClassId");

                    b.HasIndex("SchoolYearId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("SchoolAssistant.DAL.Models.StudentsParents.StudentRegisterRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceOfBirth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StudentRegisterRecord");
                });

            modelBuilder.Entity("SchoolAssistant.DAL.Models.Subjects.Subject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Subject");
                });

            modelBuilder.Entity("StudentSubjectClass", b =>
                {
                    b.Property<long>("StudentsId")
                        .HasColumnType("bigint");

                    b.Property<long>("SubjectClassesId")
                        .HasColumnType("bigint");

                    b.HasKey("StudentsId", "SubjectClassesId");

                    b.HasIndex("SubjectClassesId");

                    b.ToTable("StudentSubjectClass");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("SchoolAssistant.DAL.Models.AppStructure.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("SchoolAssistant.DAL.Models.AppStructure.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("SchoolAssistant.DAL.Models.AppStructure.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.HasOne("SchoolAssistant.DAL.Models.AppStructure.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolAssistant.DAL.Models.AppStructure.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("SchoolAssistant.DAL.Models.AppStructure.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolAssistant.DAL.Models.AppStructure.User", b =>
                {
                    b.HasOne("SchoolAssistant.DAL.Models.StudentsParents.Parent", "Parent")
                        .WithOne("User")
                        .HasForeignKey("SchoolAssistant.DAL.Models.AppStructure.User", "ParentId");

                    b.HasOne("SchoolAssistant.DAL.Models.StudentsParents.StudentRegisterRecord", "Student")
                        .WithOne("User")
                        .HasForeignKey("SchoolAssistant.DAL.Models.AppStructure.User", "StudentId");

                    b.HasOne("SchoolAssistant.DAL.Models.Staff.Teacher", "Teacher")
                        .WithOne("User")
                        .HasForeignKey("SchoolAssistant.DAL.Models.AppStructure.User", "TeacherId");

                    b.Navigation("Parent");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SchoolAssistant.DAL.Models.Attendance.Presence", b =>
                {
                    b.HasOne("SchoolAssistant.DAL.Models.Lessons.Lesson", "Lesson")
                        .WithMany("PresenceOfStudents")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolAssistant.DAL.Models.SchoolYears.SchoolYear", "SchoolYear")
                        .WithMany()
                        .HasForeignKey("SchoolYearId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SchoolAssistant.DAL.Models.StudentsParents.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("SchoolYear");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolAssistant.DAL.Models.Lessons.Lesson", b =>
                {
                    b.HasOne("SchoolAssistant.DAL.Models.Lessons.PeriodicLesson", "FromSchedule")
                        .WithMany("TakenLessons")
                        .HasForeignKey("FromScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolAssistant.DAL.Models.SchoolYears.SchoolYear", "SchoolYear")
                        .WithMany()
                        .HasForeignKey("SchoolYearId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FromSchedule");

                    b.Navigation("SchoolYear");
                });

            modelBuilder.Entity("SchoolAssistant.DAL.Models.Lessons.PeriodicLesson", b =>
                {
                    b.HasOne("SchoolAssistant.DAL.Models.Staff.Teacher", "Lecturer")
                        .WithMany("Schedule")
                        .HasForeignKey("LecturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolAssistant.DAL.Models.StudentsOrganization.OrganizationalClass", "ParticipatingOrganizationalClass")
                        .WithMany("Schedule")
                        .HasForeignKey("ParticipatingOrganizationalClassId");

                    b.HasOne("SchoolAssistant.DAL.Models.StudentsOrganization.SubjectClass", "ParticipatingSubjectClass")
                        .WithMany("Schedule")
                        .HasForeignKey("ParticipatingSubjectClassId");

                    b.HasOne("SchoolAssistant.DAL.Models.Rooms.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolAssistant.DAL.Models.SchoolYears.SchoolYear", "SchoolYear")
                        .WithMany()
                        .HasForeignKey("SchoolYearId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SchoolAssistant.DAL.Models.Subjects.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lecturer");

                    b.Navigation("ParticipatingOrganizationalClass");

                    b.Navigation("ParticipatingSubjectClass");

                    b.Navigation("Room");

                    b.Navigation("SchoolYear");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("SchoolAssistant.DAL.Models.LinkingTables.ParentToChild", b =>
                {
                    b.HasOne("SchoolAssistant.DAL.Models.StudentsParents.StudentRegisterRecord", "ChildInfo")
                        .WithMany()
                        .HasForeignKey("ChildInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolAssistant.DAL.Models.StudentsParents.Parent", null)
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("ChildInfo");
                });

            modelBuilder.Entity("SchoolAssistant.DAL.Models.LinkingTables.TeacherToAdditionalSubject", b =>
                {
                    b.HasOne("SchoolAssistant.DAL.Models.Subjects.Subject", "Subject")
                        .WithMany("AdditionalTeachers")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolAssistant.DAL.Models.Staff.Teacher", "Teacher")
                        .WithMany("AdditionalSubjects")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SchoolAssistant.DAL.Models.LinkingTables.TeacherToMainSubject", b =>
                {
                    b.HasOne("SchoolAssistant.DAL.Models.Subjects.Subject", "Subject")
                        .WithMany("MainTeachers")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolAssistant.DAL.Models.Staff.Teacher", "Teacher")
                        .WithMany("MainSubjects")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SchoolAssistant.DAL.Models.Marks.Mark", b =>
                {
                    b.HasOne("SchoolAssistant.DAL.Models.Marks.MarksOfClass", "Collection")
                        .WithMany("Marks")
                        .HasForeignKey("CollectionId");

                    b.HasOne("SchoolAssistant.DAL.Models.Staff.Teacher", "Issuer")
                        .WithMany()
                        .HasForeignKey("IssuerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolAssistant.DAL.Models.SchoolYears.SchoolYear", "SchoolYear")
                        .WithMany()
                        .HasForeignKey("SchoolYearId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SchoolAssistant.DAL.Models.StudentsParents.Student", "Student")
                        .WithMany("Marks")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolAssistant.DAL.Models.Subjects.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collection");

                    b.Navigation("Issuer");

                    b.Navigation("SchoolYear");

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("SchoolAssistant.DAL.Models.Marks.MarksOfClass", b =>
                {
                    b.HasOne("SchoolAssistant.DAL.Models.StudentsOrganization.OrganizationalClass", "OrganizationalClass")
                        .WithMany("Marks")
                        .HasForeignKey("OrganizationalClassId");

                    b.HasOne("SchoolAssistant.DAL.Models.SchoolYears.SchoolYear", "SchoolYear")
                        .WithMany()
                        .HasForeignKey("SchoolYearId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SchoolAssistant.DAL.Models.StudentsOrganization.SubjectClass", "SubjectClass")
                        .WithMany("Marks")
                        .HasForeignKey("SubjectClassId");

                    b.Navigation("OrganizationalClass");

                    b.Navigation("SchoolYear");

                    b.Navigation("SubjectClass");
                });

            modelBuilder.Entity("SchoolAssistant.DAL.Models.StudentsOrganization.OrganizationalClass", b =>
                {
                    b.HasOne("SchoolAssistant.DAL.Models.SchoolYears.SchoolYear", "SchoolYear")
                        .WithMany()
                        .HasForeignKey("SchoolYearId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SchoolAssistant.DAL.Models.Staff.Teacher", "Supervisor")
                        .WithOne("Pupils")
                        .HasForeignKey("SchoolAssistant.DAL.Models.StudentsOrganization.OrganizationalClass", "SupervisorId");

                    b.Navigation("SchoolYear");

                    b.Navigation("Supervisor");
                });

            modelBuilder.Entity("SchoolAssistant.DAL.Models.StudentsOrganization.SubjectClass", b =>
                {
                    b.HasOne("SchoolAssistant.DAL.Models.StudentsOrganization.OrganizationalClass", "OrganizationalClass")
                        .WithMany()
                        .HasForeignKey("OrganizationalClassId");

                    b.HasOne("SchoolAssistant.DAL.Models.SchoolYears.SchoolYear", "SchoolYear")
                        .WithMany()
                        .HasForeignKey("SchoolYearId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SchoolAssistant.DAL.Models.Subjects.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolAssistant.DAL.Models.Staff.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId");

                    b.Navigation("OrganizationalClass");

                    b.Navigation("SchoolYear");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SchoolAssistant.DAL.Models.StudentsParents.Student", b =>
                {
                    b.HasOne("SchoolAssistant.DAL.Models.StudentsParents.StudentRegisterRecord", "Info")
                        .WithMany("StudentInstances")
                        .HasForeignKey("InfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolAssistant.DAL.Models.StudentsOrganization.OrganizationalClass", "OrganizationalClass")
                        .WithMany("Students")
                        .HasForeignKey("OrganizationalClassId");

                    b.HasOne("SchoolAssistant.DAL.Models.SchoolYears.SchoolYear", "SchoolYear")
                        .WithMany()
                        .HasForeignKey("SchoolYearId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Info");

                    b.Navigation("OrganizationalClass");

                    b.Navigation("SchoolYear");
                });

            modelBuilder.Entity("SchoolAssistant.DAL.Models.StudentsParents.StudentRegisterRecord", b =>
                {
                    b.OwnsOne("SchoolAssistant.DAL.Models.StudentsParents.ParentRegisterSubrecord", "FirstParent", b1 =>
                        {
                            b1.Property<long>("StudentRegisterRecordId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Email")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SecondName")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("StudentRegisterRecordId");

                            b1.ToTable("StudentRegisterRecord");

                            b1.WithOwner()
                                .HasForeignKey("StudentRegisterRecordId");
                        });

                    b.OwnsOne("SchoolAssistant.DAL.Models.StudentsParents.ParentRegisterSubrecord", "SecondParent", b1 =>
                        {
                            b1.Property<long>("StudentRegisterRecordId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Email")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SecondName")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("StudentRegisterRecordId");

                            b1.ToTable("StudentRegisterRecord");

                            b1.WithOwner()
                                .HasForeignKey("StudentRegisterRecordId");
                        });

                    b.Navigation("FirstParent")
                        .IsRequired();

                    b.Navigation("SecondParent");
                });

            modelBuilder.Entity("StudentSubjectClass", b =>
                {
                    b.HasOne("SchoolAssistant.DAL.Models.StudentsParents.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolAssistant.DAL.Models.StudentsOrganization.SubjectClass", null)
                        .WithMany()
                        .HasForeignKey("SubjectClassesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolAssistant.DAL.Models.Lessons.Lesson", b =>
                {
                    b.Navigation("PresenceOfStudents");
                });

            modelBuilder.Entity("SchoolAssistant.DAL.Models.Lessons.PeriodicLesson", b =>
                {
                    b.Navigation("TakenLessons");
                });

            modelBuilder.Entity("SchoolAssistant.DAL.Models.Marks.MarksOfClass", b =>
                {
                    b.Navigation("Marks");
                });

            modelBuilder.Entity("SchoolAssistant.DAL.Models.Staff.Teacher", b =>
                {
                    b.Navigation("AdditionalSubjects");

                    b.Navigation("MainSubjects");

                    b.Navigation("Pupils")
                        .IsRequired();

                    b.Navigation("Schedule");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SchoolAssistant.DAL.Models.StudentsOrganization.OrganizationalClass", b =>
                {
                    b.Navigation("Marks");

                    b.Navigation("Schedule");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("SchoolAssistant.DAL.Models.StudentsOrganization.SubjectClass", b =>
                {
                    b.Navigation("Marks");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("SchoolAssistant.DAL.Models.StudentsParents.Parent", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SchoolAssistant.DAL.Models.StudentsParents.Student", b =>
                {
                    b.Navigation("Marks");
                });

            modelBuilder.Entity("SchoolAssistant.DAL.Models.StudentsParents.StudentRegisterRecord", b =>
                {
                    b.Navigation("StudentInstances");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SchoolAssistant.DAL.Models.Subjects.Subject", b =>
                {
                    b.Navigation("AdditionalTeachers");

                    b.Navigation("MainTeachers");
                });
#pragma warning restore 612, 618
        }
    }
}
